
/*
  Motion timer to set when the last motion was recorded
  Fade timer to set a mid range fade
  At any time if motion is detected the motion will be rescheduled and Fade
  will be destroyed
  fade down to last value but half Brightness
  raise back up if interrupted

*/
var Timer motionTimer = null
var Timer fadeTimer = null
val int timeoutMinutes = 30
val int fadeSeconds = 75
val String TAG = "PIR"
var HSBType lastColor = null
var int dimBrightness = 15


rule "PIR Changed To ON"
when
  Item contKitchen_PIR received update
then
  if(contKitchen_PIR.state == OFF){
    return
  }
  val hsb = cKitchen_Cabinet_Lights.state as HSBType
  val brightness = hsb.brightness.intValue
  logInfo(TAG, "Brightness: " + brightness)

  if(brightness == 0){
    logInfo(TAG, "Setting Brightness: " + hsb.hue+","+ hsb.saturation +"," + lastBrightness)
    cKitchen_Cabinet_Lights.sendCommand(hsb.hue+","+ hsb.saturation +"," + lastBrightness)
  }

  if(motionTimer === null){
    logInfo(TAG, "Creating Timer")
    motionTimer = createTimer(now.plusMinutes(timeoutMinutes), [|
      contKitchen_PIR.sendCommand(OFF)
    ])
  }else{
    logInfo(TAG, "Reschedule Timer")
    motionTimer.reschedule(now.plusMinutes(timeoutMinutes))
  }
  if(fadeTimer!==null){
    fadeTimer.cancel()
    fadeTimer = null
    cKitchen_Cabinet_Lights.sendCommand(hsb.hue+","+ hsb.saturation +"," + lastBrightness)
  }


end




rule "PIR Changed To OFF"
when
  Item contKitchen_PIR received command OFF
then
  motionTimer = null
  val state = (cKitchen_Cabinet_Lights.state as HSBType)
  logInfo(TAG, "Dimming state of lights")
  lastBrightness = state.brightness.intValue
  cKitchen_Cabinet_Lights.sendCommand(state.hue+","+ state.saturation +"," + dimBrightness)
  if(fadeTimer !== null){
    fadeTimer.cancel()
    fadeTimer = null
  }
  fadeTimer = createTimer(now.plusSeconds(fadeSeconds),[|
    logInfo(TAG, "Turning off lights from Fade")
    cKitchen_Cabinet_Lights.sendCommand(OFF)
    fadeTimer = null
    if(motionTimer!==null){
      motionTimer.cancel()
    }
  ])

end
